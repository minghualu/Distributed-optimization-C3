import gym
import random
import numpy as np
import matplotlib.pyplot as plt

#börjar alltid vid pickup point med varan i hand
class Warehouse(object):
    def __init__(self, n, m):
        self.n = n
        self.m = m
        self.grid = np.zeros((m, n))
        self.stateSpace = [i for i in range(self.n*self.m*2)]

        #ta bort sista för terminalstate, dropoff alltid i sista rutan nu
        self.stateSpace.remove(self.m*self.n-1)
        self.stateSpacePlus = [i for i in range(self.n*self.m*2)]

        self.actionSpace = {'Up': -self.m, 'Down': self.m, 'Left': -1, 'Right': 1, 'Pickup': 9, 'Drop': -9}
        self.possibleActions = ['Up', 'Down', 'Left', 'Right', 'Pickup', 'Drop']
        #self.addPickup(pickup)
        #self.addDropoff(dropoff)
        #self.addBlockade(blockade)
        #self.agentPosition = [random.randint(0, self.n - 1), random.randint(0, self.m - 1)]

        self.agentPosition = 0
        #Lägg in koordinater som indata
        #self.pickup = pickup
        #self.dropoff = dropoff
        #self.blockade = blockade

    def isTerminalState(self, state):
        return state in self.stateSpacePlus and state not in self.stateSpace

    def getAgentRowAndColumn(self):
        if self.agentPosition < 9:
            x = self.agentPosition // self.m
            y = self.agentPosition % self.n
        else:
            x = (self.agentPosition - 9) // self.m
            y = (self.agentPosition - 9) % self.n
        return x, y

    def setState(self, state):
        #tar bort tidigare position och lägger till ny
        x, y = self.getAgentRowAndColumn()
        self.grid[x][y] = 0
        self.agentPosition = state
        x, y = self.getAgentRowAndColumn()
        self.grid[x][y] = 1

    def offGridMove(self, newState, oldState):
        if newState not in self.stateSpacePlus:
            return True
        elif oldState % self.m == 0 and newState % self.m == self.m - 1:
            return True
        elif oldState % self.m == self.m - 1 and newState % self.m == 0:
            return True
        else:
            return False

    def step(self, action):
        x, y = self.getAgentRowAndColumn()
        resultingState = self.agentPosition + self.actionSpace[action]

        reward = 0

        if action == 'Up' or 'Down' or 'Left' or 'Right':
            reward = -1
        elif action == 'Pickup':
            if resultingState == 0:
                reward = 10
            else:
                reward = -10
                print('1')
        elif action == 'Drop':
            if self.isTerminalState(resultingState):
                print('2')
                reward = 20
            else:
                reward = -10
                print('3')

        if not self.offGridMove(resultingState, self.agentPosition):
            self.setState(resultingState)
            return resultingState, reward, self.isTerminalState(self.agentPosition), None
        else:
            return self.agentPosition, reward, self.isTerminalState(self.agentPosition), None

    def reset(self):
        self.agentPosition = 0
        self.grid = np.zeros((self.m, self.n))
        return self.agentPosition

    def render(self):
        print('------------------')
        for row in self.grid:
            for col in row:
                if col == 0:
                    print('-', end='\t')
                elif col == 1:
                    print('X', end='\t')
            print('\n')
        print('------------------')

    def actionSpaceSample(self):
        return np.random.choice(self.possibleActions)

def maxAction(Q, state, actions):
    values = np.array([Q[state, a] for a in actions])
    action = np.argmax(values)
    return actions[action]

if __name__ == '__main__':
    env = Warehouse(3, 3)

    ALPHA = 0.1
    GAMMA = 1.0
    EPSILON = 1.0

    Q = {}
    for state in env.stateSpacePlus:
        for action in env.possibleActions:
            Q[state, action] = 0

    numGames = 50
    totalRewards = np.zeros(numGames)
    env.render()

    for i in range(numGames):
        if i % 5 == 0:
            print('starting game', i)

            done = False
            epRewards = 0
            observation = env.reset()

            while not done:
                rand = np.random.random()
                action = maxAction(Q, observation, env.possibleActions) if rand < (1-EPSILON) else env.actionSpaceSample()
                print(action)
                observation_, reward, done, info = env.step(action)

                action_ = maxAction(Q, observation_, env.possibleActions)
                Q[observation, action] = Q[observation, action] + ALPHA*(reward + GAMMA*Q[observation_, action_] - Q[observation, action])
                observation = observation_

                if EPSILON - 2 / numGames > 0:
                    EPSILON -= 2 / numGames
                else:
                    EPSILON = 0
                totalRewards[i] = epRewards
    plt.plot(totalRewards)
    plt.show()












#env = gym.make("Taxi-v3").env
#env.render()
